CREATE FUNCTION FN_AGINGSTOCK(
	@ENDDATE DATE
)RETURNS @RESULT TABLE(	
	ITEM_ID INT, 
	TOTALPCS FLOAT,
	TOTALPCSOUT FLOAT DEFAULT 0,
	RANGE1 FLOAT DEFAULT 0, -- 0-30
	RANGE2 FLOAT DEFAULT 0, -- 30-60
	RANGE3 FLOAT DEFAULT 0, -- 60-90
	RANGE4 FLOAT DEFAULT 0, -- 90-120
	RANGE5 FLOAT DEFAULT 0 -- >120
)
AS 
BEGIN

	--DECLARE @ENDDATE DATE = GETDATE()+60;
	DECLARE @STARTDATE DATE = DATEADD(yy, DATEDIFF(yy, 0, @ENDDATE), 0)



	DECLARE @TEMP TABLE(	
		ITEM_ID INT, TOTALPCS FLOAT, 
		TOTALPCSOUT FLOAT DEFAULT 0,
		RANGE1 FLOAT DEFAULT 0, -- 0-30
		RANGE2 FLOAT DEFAULT 0, -- 30-60
		RANGE3 FLOAT DEFAULT 0, -- 60-90
		RANGE4 FLOAT DEFAULT 0, -- 90-120
		RANGE5 FLOAT DEFAULT 0 -- >120
	)

	--positif
	INSERT INTO @TEMP(ITEM_ID, TOTALPCS, RANGE1, RANGE2, RANGE3, RANGE4, RANGE5)
	SELECT ITEM_ID, QTY*KONVERSI,
	CASE WHEN DATEDIFF(DAY,CAST(TRANSDATE AS DATE) , CAST(@ENDDATE AS DATE)) <=30 THEN QTY*KONVERSI ELSE 0 END AS RANGE1,
	CASE WHEN DATEDIFF(DAY,CAST(TRANSDATE AS DATE) , CAST(@ENDDATE AS DATE)) BETWEEN 31 AND 60  THEN QTY*KONVERSI ELSE 0 END AS RANGE2,
	CASE WHEN DATEDIFF(DAY,CAST(TRANSDATE AS DATE) , CAST(@ENDDATE AS DATE)) BETWEEN 61 AND 90  THEN QTY*KONVERSI ELSE 0 END AS RANGE3,
	CASE WHEN DATEDIFF(DAY,CAST(TRANSDATE AS DATE) , CAST(@ENDDATE AS DATE)) BETWEEN 91 AND 120  THEN QTY*KONVERSI ELSE 0 END AS RANGE4,
	CASE WHEN DATEDIFF(DAY,CAST(TRANSDATE AS DATE) , CAST(@ENDDATE AS DATE)) >120   THEN QTY*KONVERSI ELSE 0 END AS RANGE5
	FROM TTRANSDETAIL 
	WHERE TRANSDATE BETWEEN @STARTDATE AND @ENDDATE AND QTY >= 0

	--negatif
	INSERT INTO @TEMP(ITEM_ID, TOTALPCS, TOTALPCSOUT)
	SELECT ITEM_ID, SUM(QTY*KONVERSI), ABS(SUM(QTY*KONVERSI))
	FROM TTRANSDETAIL 
	WHERE TRANSDATE BETWEEN @STARTDATE AND @ENDDATE AND QTY < 0
	GROUP BY ITEM_ID

	--SELECT * FROM @TEMP WHERE ITEM_ID = 7
	INSERT INTO @RESULT
	SELECT ITEM_ID, 
	SUM(TOTALPCS) AS TOTALPCS,SUM(TOTALPCSOUT) AS TOTALPCSOUT,
	 SUM(RANGE1) AS RANGE1, 
	SUM(RANGE2) AS RANGE2, SUM(RANGE3) AS RANGE3, 
	SUM(RANGE4) AS RANGE4, SUM(RANGE5) AS RANGE5
	FROM @TEMP
	GROUP BY ITEM_ID

	--SELECT * FROM @RESULT
	DECLARE @item_id INT
	DECLARE @TOTALPCS FLOAT
	DECLARE @TOTALPCSOUT FLOAT
	DECLARE @range1 FLOAT
	DECLARE @range2 FLOAT
	DECLARE @range3 FLOAT
	DECLARE @range4 FLOAT
	DECLARE @range5 FLOAT

	DECLARE db_cursor CURSOR FOR 
	SELECT item_id, TOTALPCS, TOTALPCSOUT, range1, range2, range3, range4, range5 FROM @RESULT

	OPEN db_cursor  
	FETCH NEXT FROM db_cursor INTO @item_id, @TOTALPCS, @TOTALPCSOUT, @range1, @range2, @range3, @range4, @range5

	--DECLARE @DECREASE FLOAT = 0;

	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		-- JIKA RANGE KOSONG
		IF (@RANGE1 + @RANGE2 + @RANGE3 + @RANGE4 + @RANGE5) <= 0 
		BEGIN
			FETCH NEXT FROM db_cursor INTO @item_id, @TOTALPCS, @TOTALPCSOUT, @range1, @range2, @range3, @range4, @range5;
			CONTINUE;
		END

		if @TOTALPCS > 0
		BEGIN
			-- FIFO, DIKURANGI DARI UMUR TERLAMA		
			IF @RANGE5 >= @TOTALPCSOUT 
			BEGIN
				SET @RANGE5 = @RANGE5 - @TOTALPCSOUT;
				SET @TOTALPCSOUT = 0; 
			END ELSE
			BEGIN
				SET @TOTALPCSOUT = @TOTALPCSOUT - @RANGE5;
				SET @RANGE5 = 0; 
			END

			IF @RANGE4 >= @TOTALPCSOUT 
			BEGIN
				SET @RANGE4 = @RANGE4 - @TOTALPCSOUT;
				SET @TOTALPCSOUT = 0; 
			END ELSE
			BEGIN
				SET @TOTALPCSOUT = @TOTALPCSOUT - @RANGE4;
				SET @RANGE4 = 0; 
			END

			IF @RANGE3 >= @TOTALPCSOUT 
			BEGIN
				SET @RANGE3 = @RANGE3 - @TOTALPCSOUT;
				SET @TOTALPCSOUT = 0; 
			END ELSE
			BEGIN
				SET @TOTALPCSOUT = @TOTALPCSOUT - @RANGE3;
				SET @RANGE3 = 0; 
			END

			IF @RANGE2 >= @TOTALPCSOUT 
			BEGIN
				SET @RANGE2 = @RANGE2 - @TOTALPCSOUT;
				SET @TOTALPCSOUT = 0; 
			END ELSE
			BEGIN
				SET @TOTALPCSOUT = @TOTALPCSOUT - @RANGE2;
				SET @RANGE2 = 0; 
			END

			IF @RANGE1 >= @TOTALPCSOUT 
			BEGIN
				SET @RANGE1 = @RANGE1 - @TOTALPCSOUT;
				SET @TOTALPCSOUT = 0; 
			END ELSE
			BEGIN
				SET @TOTALPCSOUT = @TOTALPCSOUT - @RANGE1;
				SET @RANGE1 = 0; 
			END

		END ELSE --STOCK MINUS
		BEGIN
			SET @RANGE1 = 0
			SET @RANGE2 = 0
			SET @RANGE3 = 0
			SET @RANGE4 = 0
			SET @RANGE5 = 0	
		END

		UPDATE @RESULT SET
		--TOTALPCSOUT = @TOTALPCSOUT,
		RANGE1 = @RANGE1, RANGE2 = @RANGE2,
		RANGE3 = @RANGE3, RANGE4 = @RANGE4,
		RANGE5 = @RANGE5
		WHERE ITEM_ID = @item_id

		FETCH NEXT FROM db_cursor INTO @item_id, @TOTALPCS, @TOTALPCSOUT, @range1, @range2, @range3, @range4, @range5 
	END 

	CLOSE db_cursor  
	DEALLOCATE db_cursor 

	RETURN
--SELECT * FROM @TEMP WHERE ITEM_ID = 4784
--SELECT * FROM @RESULT WHERE ITEM_ID = 4784

END